// https://leetcode.com/problems/unique-length-3-palindromic-subsequences/

/*
 * Given a string 's', return the number of unique palindromes of length three
 * that are a subsequence of 's'. Note that even if there are multiple ways to
 * obtain the same subsequence, it is still only counted once.
 * 
 * A palindrome is a string that reads the same forwards and backwards.
 * 
 * A subsequence of a string is a new string generated from the original string
 * with some characters (can be none) deleted without changing the relative
 * order of the remaining characters.
 * 
 * For example, "ace" is a subsequence of "abcde".
 * 
 */
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Unique_Length3_Palindrome_Subsequence {
	public static int countPalindromicSubsequence(String s) {
		StringBuilder p = new StringBuilder();
		// List<String> data = new ArrayList<>();
		Set<String> data = new HashSet<>();

		// call backtracing method
		// int count = helper(s, p, data, 0);

		// call helper2
		// helper2(s, data);

		// call helper3
		helper4(s, data);
		System.out.println(data);
		int count = data.size();

		return count;
	}

	/*
	 * Method 1 this method is solve the problem but it takes longer time time
	 * complexity - O(n^3) Space complexity - O(n^3)
	 */
	public static int helper(String s, StringBuilder p, List<String> data, int index) {
		// base condition
		if (p.length() == 3 || (s.length() - 3) < 0) {
			if (p.length() == 3 && !data.contains(p.toString())) {
				data.add(p.toString());
				StringBuilder temp = new StringBuilder(p);
				temp.reverse();
				if (p.compareTo(temp) == 0) {
					return 1;
				}
			}
			return 0;
		}

		int count = 0;
		for (int i = index; i < s.length(); i++) {
			p.append(s.charAt(i));
			count += helper(s, p, data, i + 1);
			p.deleteCharAt(p.length() - 1); // backtrack
		}
		return count;
	}

	/*
	 * Method 2 Better than Backtracking time complexity - O(n^3) space complexity -
	 * O(n^2)
	 */
	public static void helper2(String s, List<String> res) {
		Set<Character> left = new HashSet<>();

		left.add(s.charAt(0));
		for (int i = 1; i < s.length() - 1; i++) {
			for (char element : left) {
				boolean check = subHelper(element, s.substring(i + 1));
				if (check == true) {
					String temp = "" + element + s.charAt(i) + element;
					if (!res.contains(temp)) {
						res.add(temp);
					}
				}
			}
			left.add(s.charAt(i));
		}
	}

	public static boolean subHelper(char element, String s) {
		if (s.contains("" + element)) {
			return true;
		}

		return false;
	}

	/*
	 * Method 3 Better than method 2 
	 * time complexity - O(n * 26) 
	 * space complexity - O(n)
	 * but hash map take more runtime
	 */
	public static void helper3(String s, List<String> res) {
		Map<Character, Integer> left = new HashMap<>();
		Map<Character, Integer> right = new HashMap<>();

		for (int i = 0; i < 26; i++) {
			left.put((char) ('a' + i), 0);
			right.put((char) ('a' + i), 0);
		}

		for (int i = 0; i < s.length(); i++) {
			right.replace(s.charAt(i), right.get(s.charAt(i)) + 1);
		}

		// update first element occuence in left hashmap & right hashmap
		left.replace(s.charAt(0), right.get(s.charAt(0)) + 1);
		right.replace(s.charAt(0), right.get(s.charAt(0)) - 1);

		for (int i = 1; i < s.length(); i++) {
			right.replace(s.charAt(i), right.get(s.charAt(i)) - 1);

			for (Character key : left.keySet()) {
				if (right.containsKey(key) && right.get(key) > 0 && left.get(key) > 0) {
					String temp = "" + key + s.charAt(i) + key;
					if (!res.contains(temp)) {
						res.add(temp);
					}
				}
			}

			if (!left.containsKey(s.charAt(i))) {
				left.put(s.charAt(i), 1);
			}
			else {
				left.replace(s.charAt(i), right.get(s.charAt(i)) + 1);
			}

		}
	}
	
	/*
	 * Method 4 Better than method 3
	 * time complexity - O(n * 26) 
	 * space complexity - O(n)
	 * because of we use arrays insted of hashmap
	 */
	public static void helper4(String s, Set<String> res) {
		int[] left = new int[26];
		int[] right = new int[26];


		for (int i = 0; i < s.length(); i++) {
			int index = s.charAt(i) - 'a';
			right[index] += 1;
		}

		// update first element occuence in left & right array
		int index = s.charAt(0) - 'a';
		left[index] += 1;
		right[index] -= 1;

		for (int i = 1; i < s.length(); i++) {
			index = s.charAt(i) - 'a';
			right[index] -= 1;

			for (int j = 0; j < 26; j++) {
				if (left[j] > 0 && right[j] > 0) {
					char ch = (char) (97 + j);
					res.add("" + ch + s.charAt(i) + ch);
				}
			}

			left[index] += 1;

		}
	}

	public static void main(String[] args) {
		String s1 = "gywghdivwpgymbjqfbzelzsnmcezvvwimzvcdujeoexfaqmsphzsqwxtytjikvcddfzrmgqziiwqyfayezdzlkkffstwsxvqltxbiyplvvzypskmqdqsuscxvwgbbwargaveyiikkvscfvjmqduufoepeuegowaukvsjmkiozyoclterhrggszwyksguoyodfsrquhurhhjruuthiseqmqpgjbbfphxdkhkydtjgtyxxsuvlvakmqrbqrogpsgoesiyfdptupeynrvnswsagnnyijkdccklnkzkbyskemsivvyhwkvjswplfahkfoihucrdxzuqnofdbjpboqgzsqeseyibmkulvxrwfoojkhraayrmiwpkjvjaccjxbefrfskpmlqxhaqgedqguytmawjzekztquxvwjakyhjjnfkmdohpfydsnztswnnckryxsnhifirtlywtluzqaqmgdawrvwbqhuxlpfxmovbgjcjptwevolhbchzgrwxnmojuiypvdcqltabohaswrfuryiuphxrveyndwzmvhlglxttlikrchkqscknpjwixdnhoiqhtecdceyynsuouhbcduqvmscimlzwhdubteisewmaztbenultkhieimykwqvrklqxaueldtgdyqznkrfzthfljxoorrysispbdhaylfrroxxqhrrhzpglcgmpkqvlxuwgnaraqpnkmudgiiadeedokauinfzexfmfggxwwnoyrgoqhyerfydnslwkpocncnfyxgfyssreuijhleabgnprqmggxrpwffgwjbfzvwdbxzbrvugqlglrmjnplmcttmggznmzzenytxhriphvjcpmtndrbpkhaopegdllwsxlbmsvaciislwmjbkswgppnzumdkqnvsbaehtwfraxofdnudiirzfqbvnwathcxlfdsjsuhxqztcqmjwofsqdvnqdnwsoofpqkayvoxxtowpxtommjpnkwgvpdjbirlzixftztndnefdqmzumxjciymyzxdbdghsjwokljpdlcoskjshksqlxtpugrnlqncstkedcmtkagvaxobuamsozdvvekmgpmtfeitcfqdmwqwgsshhmenmpehlrrxbikkkopgwrjflzwejvdzpxyxonuopezecekixsojmaykeivcfidznhfruexgscexdbgbzonqdmqrlumffcetbpwmcmxrygctcpjowzovbdnzztjuixgjkhrqxwsbwbmwoszqewxmssbxigsdetyeghuvyqgaooiumlgjrnoyicfalkmxasvylmdqsmhakhrjgrecyjirinobqovnvsadvgjbruwzqeqytjgzmrugismpceybzovifqtgrzceinspjivfmpmoncsnbkcoyxohhmucqzthlxymknqiisriuwhygemjcysijmbcqvzektocbjlvdbikvkthskkrqofemivfnsfrggewnyrnyqtyuligpxtaadncbfekkconnkgsxpbzdmmkawphtjtevojffipxzbpwtxjhpufavbtwbltxiafzxgdtaowfyyfwwfpjcmbatqlcchtkjroxesrwydnavhqvzfjxrzbbpuvgrsjixijycojomizwzjrogdyaatnralgtlwybycwakmmdbbhlhjysynveqyquhccjwmpdfwqtvmajrqdgtzzteoxrrimjdhmbnsrldwwjfevhoevtedbwfnlxrdywbxkljuanuztxciefmvvdyhhfjbovpuvbpkasywkhnjnheemkjisvxidemapdjsvihwtelbyjeuzplreaxfiwlfebpnsfdfbmqftfhmmlbuyinnluzhvuwxpbrwofagmnincgusqqdowfnkqlakcsyjubyuqdnupjcjnamtldlacekfdtewekjwbcqzkagidkodybvhlpadgmcysudyjvdevufhptqisyfzcdytqhzfvunkxlabnnwjrhhqcczdhlypmgcjwaislwgxcorrqhkrehiygqoamdavtwsjzhnbdlmjaczllmilesvghxdualhdtatoafhfscrnelsihvlgfgwdinnzvqtxexwwfayeygkpfnmcyxiwwssdecrqesbtadrhzzeroqojtfvudisgfjoqewnsxqpmsisvsxhiispmewpwefnorcykghuvpcgcnhultrgobrrwylqzkcezmqqhpajfcngjeofrivcsdsxvpzmaolzvrleoofuhcjuvptfpjepuqfmfiqebyctsrnlgvulzvxfabccqgcodtmycsmbcforgvjhppwphxpqrddmecdxihceerwwnqxqactirfcodaqpekvdwdqgrouqxkwcinallbyutjrpzirvkdqewonvnmyrnuhtnybedhjjxfmsddiksujcvzunbicveqhtxnztblkgohgunxjsdunotlunithlifffkbpodtgoytzqswuhdzyekftafcblnolyurbviiikrtffsrcxdrdewxzebmtzoeaqlytmbtefuvoyfmmtpcpprdeagltimgaoiyyspczzpofzptqodlfgaaryovxttvfsbsbmkpxxkxsnnqasphxuxpegtmnswsnpqdbuzourxmfsdxwxmzlgaqtgayfthdghgtcmigtbfdrebblbwaqtlpvygicrwzhjirfbjevhxymuuvxpcmlnsoksaepjsqbczibasdxqfkcmovidxxvnzixyvhojbhqtrctagutmvxvovidfetwhgriqwrbftadvidiwaeicvumbnwvfnkaccfvfspctsovvrlhkhgzbvfwrvsocdrzgawddynatuhbowggygbvvwsjwjkowbedqaestyrosljfeuhiorwpgcecgspnfallbrkbtoufcyuipofcjqgqmyfmivyocergaxraifvioniqeoygznmzmsswxjqyavuichdnnbsyswmqymqpvtfrvajczjqagjstghghcxondkmhgmycgydazbcrapbqaizmuewxghthyihgtxzxanxonnckglcxrnumuvxdjjhnlnktqxvlbyenttmigwdzhejoqgobgsdnnqssvtugrnefqvxbormcwxuybfwhadbhkgjlugbwijvreqdgwqmlcotxodrywqljnjcgpnvezhrhkwptdjmwzmrfhujymehgmqbznuguxykdbejizhghfkfycagbxnlhafvpgyrrhupffswwecidudkvyovxytbfbckfudtluljhbgmetixzlupypsdkuhorbkbzpyesqvowmmfqwfecyottdqwnliryjrvqfhxnuaqlrlrwegquyqkketzyoowoowgultllqkwdgauljgqhsygnbbidodvxmamwxrsnkxekblbeqdxaezrhkcsimvokzwjmbxonfofzsgqsekpltojlwefiogbrxlsyhetdgwrupksvxcpyskbgssbyxomjrbeaxrlufegidpczzrkqctxegvvpcwokgescuisokwyapwknqmrmbssscswkhvnyyphbrvapsoodumbhbccrgopwknnnoapduumuizombssqftyzpqboxtufyaaxgyfqxssqpihuvtyvyazwokoexefonqhecxlhmwmeisgiklechdslygmskchfqfatxnhwefboxvgfujsawrcuibzytdpfpdtfmgisfzkaehadluidjdlrdtijqgjwqenfshyvujkxcnbzkvjiuwcspicwivmoilcgcyddnvbhworqgqivhjuigninvyqsbohponoppqvwhhabupyojhiqcooaxummbyncfepfyumbdmdghsdvlqudfgsnouuurhcehddvcvviqixtartsarknwmgmrvmaqqysquaembbqyuahaelilsqwxtfbivcpgceznllihxzvufgtdoncnjcppprmzatjymzusmvxdumuczuhiavtguqqvlqhslvfdmgwseecfhaknrqkjpxxgjyskjnjxxtchftrbtobikclmbtbdcdriebkghaslhxxzaxufvqmnmmjsumsxeuegmireomkxudtdzevpwolovrvnpsasdwjzshalveinkynawhbyjkfwsutxbeicunsnwhtakpzxxdgjmajgofmpyryiwjyeziooksjpjhwibhicuakjkjnpoqfqqczqgejmecokzveorsnwgnkjlrrcsoyyxzroejcuiofjtwhphsfgqlyouvulzbtykqxxpjrjnwkttbyeyjcwtmahoalmsdzmavxlupkjudmwqipsnfoovvraknchmozyvsufwillyzqnileazqwuwkpcsuhpfupkmsjxhwcucyjfblzoqlqicmkfuvbbdpxvwlkyyeuunvzfvexzfouefpytxbmrlkdjkchsuaevoyttgjcuharjaqrjeifaimqwnuqdwwzakusqmlqhdbnyfhdszymxbmhskzqarsrdmkdymdbkifwupotrskkorvkketdzvowrdgasaojgomfhosktzoglatowyihczvjwczkcezpejcrwmjbfukwnaodrrwibcfnfrphqcrmewpghuayjbjmctlkwmehekiagwibyouppsegewgwatlxciqsdwmkrvkotojwrdfuusejtucenakvlnnxffnhwdgxxrjbfjtpiasumropsstyptvbxvsdczmelbmkremdscukcnafetzphfdpnvgbivzrsnebvcpdomellfythwnrnapayvtqhswtpmudgzpzenwyfwlqgrisujhefgbjonjibnpqccanlngivuwphvsoldvgwziytotunjdmcvcwrdlcpougzktfksuwvirkqsabhhdrhoetjybuqcquywhzewvxdfjxqhzxranjiroehfryszxzcebskpxfghojdqourmvmebfomdnrdvtslkyjfpznafglphjgvakyphieepaqobqvmceoeaesvzqixefldtbvbcwytytzlhbkioujxnihmmjgduhlhkezikyfykvxaveiwscqrzcwenbasbecaxngzqkbidzfpltslynsfukwhnpgvzwffafaljkwgzegqbddnqchtcdibrnnthhjvqlmqtgrfyscgywjgtdrwhtkaphxuayxqjpjcccujvhbyzuiagohhwxtxvyjlwbgaztieahqjmeshadcdepfeayhwcprmsmhrglfslicftnmpnwjtwjyiigiqqiichkbgmxgznokawqyhtjvrorpgmsobijaowfihhaisqzpimwxmsxpjwoxbcnhzejgmbxexigfojfawdghobqyqkkehpakwxfpkwjilesbjqezufpqubebbdrzfmeszoxytuounwroyxskklrhffcipfxbedhtcxbhzfjqpgrnhpvwejncxurjhkwaefecsdrywbcfjrjbcovymrjwhkkhfmtagtcabqewxqfipgynjkddifltyaulzkkxmyehobbtvaagauuljayzdrjtohcdnnemtzmuzdzqbthwooyclcbkztrntoqqjgnvlpcjxipgtfbxmfxehepjebpqghhvwuhgglidcayjvszqcwpynelzokarzggjbrieigrhlfmocvvzqvhbmbccefjysrztwdytgqaksgnklcvtbkzxjqyudogbfbcwhmvwerpzrhfckuchhvoaiwaifturpuazmqsspwqpultsfcwawyltixsydwbwlboxlvoitoazzvdnmhbwixycjanpicocjuwznfnbudgxwllcyohdcuftzropujqmzvqpjacohbdtwyenlypybnxskvhowwtkxyduozjlewsojelldzlmzwqjpfalrmgzvxytnakvonwybyrmpdstxylyylquahxdesyoeflxuaowmwietrzhcydovcxzmwvaesvrgmuncwwybuexcvuqwythawoyqrpvkjopmnrukloeeukzeihhmyztuhkvoxhbzlcdiclacuhwcocklecpvpxetcomtejbiuxdgejxhruwshyvtsmtutxdmfnomlbgdfhhjbqrrfswbdchmocgljidpmevwhmwfghbrhrdvilvcshuhnyovggquxsjixfmvbctbfjyjpsqpikjhrmklgochnkpzshaeuelstfdrshqdkahniqvintyejtkbpcxmjqoaizfgabjzpbyfixjflhdsxesrbriiyzcuscioovtoegpllixfvdcqtfordjnkwgvsdpvriiwowcyhzoyjdgadfvxjwjqpyffcduvbswigrjkvcfsjeipygtavhssasophyjqlbmnxwegyglqblcaarkniingltxwjdxrtmaimfspmdgrnkukkfxfpkengoliarehwjvtxfgxzntduxdjkttjherhlxjofinyqpewhdxuknfppfvyqaswfsfcdhxtrmjgjssaedqykxkpmvwycqpkixnzdmospydtgvfhrmpdnhitdguaefrucqjwdrggtyzqnajpceoyodcvzxtqiljlsfiwfualsfldrjjncyayzznuzyqlzrcuzrlegdajoevjbxzquzujwppmajpojvxvdvisnxyvwpenrrkgqrrlvlffabcztzjvuepjvkkbjlwmutfhmgakgwlsdqldlygzizbqkoenqkdehkawctwyoulvjmphtogazamlyzbzmzqrfhkcviivgadlvsbjbfanqfjctqirvjdxzfiuvokryuxwmyjvawwjabiwshjcfohvtrsbqhxzxvicedhcxjeqcgghoydtowkofyegfzqquokskxpikqhbpfcjopiczgtwvzupqaqoiwngqbuvgmwczikirqrdkvznlvzabxopcqfncblnqhugwfzrjmcvsoubwahsrdjtqdkjhlrwwazonzmktcgxeejylpsevhghossmdkysbrpblmgcuvivuzixfioczrqobagvwmflqvyncnncytlwtartxxnqrzbdflmpzmgvxpjxyueqftmdojdekvzxlprkqrmgnwqgkirhvqqyknoyzpwzbcvteahdmifynjgjaieaurtqzcycsstthcbbfpgvludtburawtavtkytsrcmnnavhymgzoswdjpuxyfqxnylbtsbjotosrjlmveclsyikmnmrlgstmwzugqigcfrossfocaarywwzqkciyqpraoyymjxaxjablrybjnbjnfdslflkcjrooowyvhskbihtrswzxzrdbveeuuquflarbgeynlusyftmltrqhcowjaduphamghczyynxgiexviyqgdnzxgxttdwnlcfeqaluqfcrsmyswksqntdfwseybdcpyorbmoxfpveupqpyvvaatxdorrnddgtxqzneowjsaznumypnlooehgefiosqjnasueuadbmjzuyyqoocmoowfkqpcxktjrscbghwxzikowetxegrbrbmzwjuyhrkngpnpyjdmjcwyefqxxkjjijetuzarhluhnznsrsbchlikylflsaanryyqblzstmhlyfhasliiasrffzuwztzmdrsqkfnnggtkdrdtvzdfexbsuwqimrhdavdtcnknmktbuohlsscxvrdcjxtcfchentmshugglcuuknfzmgmicvzllytpfwqpabglnrsihuefgrlryhcviynkfhdjtxagxliigzhvhbayropnikarkkrklfptmnykswsxppsotyyqvmxozysnwctkdatcirssgkhgirfseyxijqmnnrnovavjimeanodhzrwchesfnnugsweheohatopkmnxgmvcyadviooyiaxdmaexrgvwmwakiqkzdvowibqeuwarsddwgupfqvajrmhpkatjzjcxnehfsetjcdewezvfpryoyvxhegadsuvcwbtpwirzapnhrewyouywqvsqhsqoyuwmgrprwtchxtvrzchyayhzvnvkrjdqqqeemljqrzpdzsdtqjksqctlvxdvyquscazlifqeupulfklomoldeybrxvdshgdtlkzribilqeugctkhvtosohmarlplcmpeocvfyjehfpdpnqfbsxynrbjgpaegiultvcvtsuuygwtzqhwzoxdrphjyctfvuxohxhhdvgqorxzhlzxpxtahwviouhlqjhwfoerbzzsoeccwnshezzlxjxjfqwayhrfiwbjvarqvtsowgkslfqzrfrqvjmlsrdvlvkkimikgjncdbokopqzhpkeifpexcksfmulqbtfgtbbmnljrjhzaiorzltrjisoxbrcvjowjzrjlklvfjwrwdukdcqqcfkyzkgpjrvyxmmeufjlbgskstyqkaekyrzvgxsvilggzlhsecuqapxxmuzgntmaqtjtzafgzrnipfrborhqyjtcbfyvpwnfstybhgybkqrfafhjokqtvauunxiqxzrnsjsgsbhpnbfptlrihwgguotuawlvqyppdbhjrqehtkffjdxkvqlwzgtfwvkqktibsxuiashdwdeskdgvgycuazmqvfnannldrnazjirwgdvmqsmaypbomgqivthyyxkryjqvfkkyascgebefkenlzbcpbiftzbdsinadxovxqrnofevwuqmjlfurgjymykdfztfaxyuhlzgraneragtijegqomgcpgojhuvpstpgwnvvxasjsforsojjtyuywsebnpkzhvnqxhftunzxjykguqyrmbuuyquoirsgupjegcoogocnfubnmtkpgjohcimgrxrtzusakfdxvkyayitryokwioklfvaxwcreiljhpywhgsojpkfetyuxvpbdfcjkzfrnhsgyuehstxytscdoxptzynbgxlmdfrqfbudtmtwcnooorhusgvlsbnxiottmqfqbyuuuoeapjgqnkmilfnkniiqtvrvzzfxmeekhbcqioztdndmjpodiznvghntoluazdxlaojzltdzquwjdhluvysxlygxwykmxlbbvoxyjsjujxwydisorlzmuvryjyqqrsmvcouxncounxdpmgnmomikvecyvgmuutbrxnuabxxxyzwyhwpbulhfunlqdgsxmzzkajksxeqkpxkbczhwgnmfdpkdncadknijbtyelmxhnnsxhrxpmcfoudtoetqsvicfnbxhhuihiehcfzqvawshpdramcvlomjfjahuizipdwfffxwrwfdiomyeexibqqgpybpuzsngiydmaxjnupalgbzmokmvlfmpgbixqqcxhhmhaatruihatgiqzlakajbucuzqjlocmtapnmlrbrdthytkfgqnngvvzblwwokuursysmcrole";
		String s = "nsnasqpikesbigujlxfwendtvxkkggclwgxmiethvkuycpbjlgrdoiqaqiqjwginbkilhfrdlbngjhexuxjhytnkaejgclvicgctracrmfqrcepvgunhzsrdmdlmciqzfvaprhmxgxaeuztpeobkvptitasgkivqoznygwiekzojordnoasaifnoknmeswexzabzoxltyfsmykcgjzbpolvrdtqevpwyrkitgpskouqoqhipbdufgjnjvdnfkfnpxcpjyojaqpcsptzwwyhloqebmunrrhwxcbyymehuhthgvoeexnktvzmeabqalaomwzrzlrrqizxtwkargvsaiqcujdshqruraziobxldsubyvmmehmhkyyynidnaqwrarkglqrnvxdreauowlfuloqenmilsjikijoaytgzmekwncbbigqighqjpqzhlhdsjitffbpicbckdnlwrjoeoyrgydbrlzmcnwsjslyfbgqapiecgrohgpzhmsnpskktsnmlhsnbhcqqebsvtqairdkjsmbxznyyqnzlojwcenfmgwcnrjxcttzisfvsbthimxtzvmuixhdvfmbfmqydtbjuwkvhfraqztzfskbkeurmvicswgqsywcdfjnbsuijkqtvzirdeaisjvgtxyzpajnpmvegnajoxzfiyknpbuowpuhupbwsmyvvxaqtdqaragwjcuakvjippzbknkpwtseeegakrowvwmvtgticruvzdbvocvforxthsdhidgpegdrubaelyereriqvosgfeijqmkpxshtuhxnzwwlyfbhoampkxgbmedzkvebtxfedipomllotrfnblpezywfscnyeeizkmapsxvbschbiyezgjlarqfsxsjhxspeqlcywovxwfnnyjqtupitptimobsevmftramowblvnhrhsteqggjqwbqjdvlyyaevrjurgqutbtjtehbkkkqaqogbikmglgvvifsaiwtdkbzhbrxtvmixsedpivkgxqxjsytezewkphoblqjhnqwaztlcbbadzznakqyctmsqagbbzslsrtuxeaofskbgdbbwrfajufjnlikalzjddnibkodsymrbuoczdcsesvgtqgacwzagsmyjdsmmbdliaqhvthansaprdtfgbrxprouvpcuvuaprcvwlszprvqnlxtipxqugesvdlqmnsqwvxowabtossmvetmmnrlnaardynuqcsxetzleorukvkecvxpztrjvkwowylcczoagaorrzkmtanfufpqjksqmasjnaavbpobqebstvjzjlhuptuvgkkjsptpzlcdqcxiwfmgadylhvsztliasrbemqfwilqrdeisgoafpfmoljkywuibigszhpdacbotsfowdgdwnwgctarammnujxkomkixbfptsxslqdemvllagqwasawnhujidcniovxwqxwrlhepbbghlcqhfsfrlguqqvnlftpltcsreoahpqnuefkycbzycvmtvykcjxwnqneitwjdooisxqhhirwofwfgzzpadgpkbpkifrsfbrfmmpzqussnybbsqfyyhienpqghcfuocqtsdjlxfvbfjrqullliauetmxqxjbfwfzbeghztclfqlsqnuuesqkobnsrtmbkgxamgcjasbseknfwipxvlguomjgdhzthcfhwunukjvuzefrmkltivaupztzglqikhyebplixmknsfrtwaysmuwelhgoxdwlwjrgqqgavqrxgihwubpzgxthlnsxqyqbskxvyeelmcllmycxdwetfyvgnmbaqfbrdlwslirksnptmxetnemzqdmqxolzlklqnoldljeyzpbzuetflghzmwtziizwyoviluzlalqzpvdcwxhgfkhjzwygstsetaeysluphppwttmgsmjnsjfbxufhkxfkmnrzfngqvziipwakytuwtoqjsadzhqwtcvggftqbpmxbpfmwcyfdpnpvpvbjaruzqymllzbqkagizawizhkautdwhxkxmfcwdzgiqrqptmtcjzxubwghmkyoavjoofkxzxzknccxvftakfhqzrxmdapadffqzafuileizotozvowhpbkosizcktehvxqluyhcqffcanubktmrqrjbnvrwjwbsegpaurnzixoqmupvoealfcbzukqhjrlnycezsjqyabbcssbwaznjscwzdegyashiiwskijcgyrsstolbvprddgmlcxizetakitykbdvkshcsqabsfsdlvijzqxeoqzencghxentgpbznzsuasjpxshnbokileanehyyvjcyjlwnvwjiopsuelgidmdhgnyrobexqqleicqsdiimtzghywdjbbdwfacblvehmmrrzjrqtxzarltokympzysjrlucfallhqlsseonylxqhiruqdcdvvvztdyjofqxfovgcxylkwwmrxkmmczupxudmxdpxmijxkehfwshunzstwlvmojarjsqbzvnqhbtvupehgpfkyhokzldnkntsqhlhkztjdxrgqcnunimwdfiqwjrpqalubxqvqjzaamcycmzpceqjldbjuxewcmqjiykxttfindeebbkxkljebvrsnkqlgeaozztiszfejasbxkqrtiogrdkpgctuuraomthykgevdzmdjpeoanjchuheavxfubledmqywxotmhokcuzrmwlfnwbcuajrpynjzdmihuukgehrkgavyskktiimgrobdwrckvtirbdpltqjhpbufmaqkyaaiuvgletkgizkhtxwcpxikgwrmbcvncjsrezcpytdwdjoblumyckrerwyvxnwglmogrbfvfnkqjqeknjnoapkgaedzafkvhwqogfugrfmlevfedksnhogmkwpstytwndirexczvpcxkbnpntpobafkedghvejgkgdssexcijdbcqpueyljcrisubakuhpicflvatimvqktxmzccxdaetdsnzijbkfprnzuzltkwjqtbyjvpktdjzoourwgrtfrzhckldmtshecehzcspmzctuoxgflcrpjgoatgmaitizilfrhfszpzzxjyfjlcjgzgqnxicuozrdkooqxgurenhlrkyztrnctjhpchgkcfnlukswccviglatuvjcmgapxjgccuvpwrkudpldbclpbtcjlyqirormgxwpdjgdziakccsotybpmvmhlvqpcdytqkktfiinneydqlnxwfjsrqcpwmgjysrdiqzfsfkncldujfqpizpyulopnrpnguptsniqdpsthfiodebgszakvdxoymaauermrzufgmjvvblzwopiraasjvxqhmvzhucshsbbddbditfaerbuclxvlqbjjdmeqgymmuiyhdjfvgxqohskbxfhfbdcbkbrurtubjtgzydmmwzfsqysbtvxcsdzqncjaleefnjzrccuauyewxoxzrxudvulwgjirxprjxlekpokhaengqbbqqgabqrqjmnjgioqyvawmfxejzvyhrwrokqsgoostaaxzsxyrrhiwmdlbcsrwmzreslipdutqynoazercbqdtbdtpeivijzefbbtlyrfsuecklnpdehewfjxjeqjkjepeyippthhtmxtlflosvjkhnoxzlpximsiowybmspywbjqidzinawljpqbsburkayknuvnahktiwqeqeictvoevsgvzwdmgycwngwqicryhtogzixzfnroqpptljyxqpidsqidasbcrtltdhpglaosybrhzitqcrxzbwjmufxzjteahanhcnoykhamliajdzdbfjlmavluzrawkxlhfjcvgwfwiujvnembkqddprvkrxplanelaefvraqwjpupiufggfiqlfjwsgsgomsmaocurscsgmirefgecxamtcmmpgtmvqvseyebndwhnrswcmuucwpmuahdwzpauqnehcbduqyfqcmrfazxvtmesqmfxngntbqieyrqozkcklqkbdcdavrlsqrfdodsxiqcggporzvipvcvhyyghxptljmdxbmuhdcvkopyviwhhsjibhiisnnrkjwxpxgzmoegpflpyinpmmztztzgdgeituswrhchdfwldlxpivbrwggxpromlfjcainzljyxuzyecpuujcbntornscdcyqedvsgdqkerprzivfhrstlqhvwrfhhfquwwpcttfjfhfrrrtegnvtxddxemvylpcdwonvetzhqeajpvjvocyomockwbcnbhztmkdwfkimczakknmipymqowlqutoujbkwycpcekzmdvcpnawysbjgaauroyrezoiwuivshjvlcjxybkfzyxeylzglwtdkskmqphjtythtrjugzjpnjfcvyybqhtnmybldjixojycttrheajrgvmzbnvaugntxzqyliqltlotmdtxqqbthjemkgzxnbsxnqluytgtcnoklrypjcypfxehmqqqeifxaaduyjpkiuomljvbsjfqbikucyeozhrfmnaosdsunpbylvxtymqcgvpomsmzckodieiycakpqlharbndqrktbacniglabaaddsekvwybctdzbxobjfgpajmqxvbzhhcuulvotjogdzpiqdlcxmweiwupiaehtxcnzdiuqbsyqzawhzqdfzecminmdrfaacfudgukltvhnenmaxpbvhlapkklvejqyswyipbzbumzhzigvinghkmsdrxligmtfvnwuduemjygtqdwtuhlhqqessechkiwzhxfzezdguigjkvzunztvurhxdaufsocgqqbpxrmaxwcctnqvfjpebjmskbujxlqaxvpudwjbyocapgfalftriodqqovnjfekltscicbiwnwwzhgzeshpajzgjcynfxntkhsrsvxwjhmguhwdnpuehvloyoeuiraqhdahpkcvmnujovajsojdtpwfouytatqdjjfirwjslvrfejinvudztdldgfokxvqdclifmobygywfxrrcbjvouziexflhrfdceqqyknsmhrmiikldslyyajqcydtiwkiwhkvgcxcjqoiakvcbsragzggjdiepcvkfxvtgqycrnryiwamhirxlmxdxxvtuwncgtxfuxsfitmnjwlbvwasjlyorayslykqjwtdtghcsbratgonnfpubabrexmkfxdfrqdccpuowynwdkawymjkanzllvtddpcdnfnxzklucyffvtlhggdztrleuigmrbwwitlucfcecinfectyhgiehamzkqnihtlisocwwmpoetxxnyyhbubuiftjbsksqxrfmgmmfciguvxugwcluvdszqlvjtyuwvqwxgzlrlicwxrgpxttnzbarxatitetcwfsdybcakhljvngnnsqmozjnsmtjsmcwcxphbwbjsyuqojawzstfdmnknlzzohafyyiqzwxgctblkvzfivhjlgztkrzouyresmhinllbsokjcqwiqkbhfwifrnewovopwgyezbnixizaecrakgwusffvdbwluomvebmwpyvshdypcvmmgtcicmiayrkcdrrshkcxszipkmhmzirxlneuwljtmrzdbpzwrpcjtawzqaelwuthenwyazfontkuhxiotctootvpnspfefpeoynarmjzunuhmskiadtkfxcdezjgdkhgutahxjtqghorlevglazdrnmbbgnvnthqrgpkmgwuqtpfnsnvofskpnidloszczjtgavqvqgomtjcpaygxkryyexusbkeskqecbklzunklssmnbpjoglyoofjrhregkbgdzsmkcnucnkkfpagjmgkfomdksiadysvnsjuuaqpnlrsesguzrybganmfsmhvyizvqksmsoqlddlwjrtigyamdutwmkwzmxlowrxcjwjpaynweyaiaapuqcjnyyfprwwgjleectnphcquorxkpfboippbatrljbvvfxqbdwhsncleajufnbioxuptxknzguehjbjiwoeccqbsotnkgybzhawoylzlqemvbyglnakdausvkaqiqwjwdxuufikqwlbzjzqvwqslmxfuozpyigmwvbewcuutyvaddkumxuigqecvpdqtdmeqouyuaxncgzgntaiffwngdjizxktarioasxojwtoivwbciforuioobmqxuqschnnujtquchlcppglawkjvxknjwiiuqkmuljqjpefhudxovejzniqnkixogfiyrtfrcfrflvyxenmhlvultfquctbswowjornyvrdqtsrhnhhwfmoktjimowknghddnpgipydcxnligblurbvrgxhizmyvavjclrjyzjmelzhscgqnaacjqrhiijhwqiuowjaweksvnngnxjonwszqapayuskgaaargsdpbcngbeqjsdzefmvpigfxkbpggfvetrjpbutwyoxtvcrjpldbjbaosegaigscwhupwslkszzejhvlbdtoeegjmxeqiojxoebmwipqlkievvrqilnlkjlftcdbftsnjfuuehtfuhuiuhnsglnfsjjhawyryizjmrhjyauysqvtdtmzmixabxbfaecdpyccvpfeoxczykfdttcgfmiaivkolovtyrqtcenexskiukrfsvoeawicleschilzomqejwwihzpapqlpcsaslyzopfncoqxqhzxlkezcsadcimxnkfxlifwanvpkllxnvvgbkxbrkwthqvfpkjutcilbbfbrdikoqztoppzwhgecoteciwyllqttxcbhqwssqddzthjbjrsrmhepkfkbeuhdrrsteipsahgnchqdrysvukqteuylwacqcdutkywunpmepvpalgwcvicmqgldvxgpakiqmmiltfcdrigafwijxklgxexbcckfhouhdrfjwawpzqqiogjjiwslckkxfcyietddifirsvptospkzlozfermzkalcfruqibiznayxakdqyqogwrdyqfyyeysewygihkkqtplrkqyknsaurfdpousyvvaqkwdobwhcodtjyztuopirkvneenosbutojbypqetylpxnuboevwftytvytcbmavdgnvjoiwcrpeymdbfjofoqjcdgtqmtxgvleomzyvgaohduvtvihrujlfxeanirvqvpdnlbvnbaahxfdhcsdzsqpgfqzzthybhgwlvpoxzdnzqtcucjfrkevnniwyrldnfaxishamyewigsdyufjugmbukuhlvhmvexbxuxvqynwwwrvonxvbhbetgiuznnauznwsifcmjblkpmxohmuuyowfyfmxtjcqtsmzzoenyfssveqwvhghhjmqhuofpvaaclnsfhagqccqflkkmkyksogkuoxuzyndinvbckkduggilwiteuukfzdspkyzpxymsw";
		String s2 = "abccadcad";
		System.out.println(countPalindromicSubsequence(s2));
	}
}

/*
 * Input: s = "aabca" Output: 3 Explanation: The 3 palindromic subsequences of
 * length 3 are: - "aba" (subsequence of "aabca") - "aaa" (subsequence of
 * "aabca") - "aca" (subsequence of "aabca")
 */